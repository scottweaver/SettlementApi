/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */

package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime

case class Transaction (
  /* Uniquely identifies this Transaction within Vyze's settlement system.    This is a  monotonically increasing, positive number.  */
  settlementId: Int,
  /* Timestamp, in [RFC-3339](https://tools.ietf.org/html/rfc3339) timestamp format, that indicates when the Transaction was placed.    For certain, legacy implementations, the time portition of this value MAY NOT represent the actual time of the Transaction.  */
  transactionDate: DateTime,
  /* The type of Transaction, either a `sale` or a `return`.  | **Type** | **Description** | | -------- | --------------- | | `sale`   | MUST credit the merchant's account and debit the customer's account. | | `return` | MUST debit the merchant's account and credit the customer's account. |  */
  `type`: TransactionEnums.&#x60;Type&#x60;,
  /* Uniquely idenitfies the merchant of this Transaction within all Vyze's systems. */
  merchantId: String,
  /* This field contains a lender-assigned account identifier.  */
  merchantAccountId: Option[String],
  /* The store, location number, or name that uniquely identifies where the transaction took place.  */
  transactionSiteId: Option[String],
  /* Identidier, generated by the merchant, that should be able to deterministically identify this individual Transaction. */
  merchantTransactionId: Option[String],
  /* Identidier that is a reference to some other Transaction's `merchant_transaction_id`.  The common use case for this is to associate a `return` with the original `sale`. */
  originalMerchantTransactionId: Option[String],
  /* The customer's account number that was used durning the tendering of this transaction.  The `customer_account_number` comes from the merchant, via a clearing request, and not from within of Vyze's SFH system.  */
  customerAccountNumber: String,
  /* Authorization identifier or number provided, generally by the lender,  at the time the Transaction is authorized.  */
  authorizationId: Option[String],
  /* Absolute value representing the total amount for this transaction.  */
  amount: Double,
  /* Ticket terms is a value that the merchant applies to a transaction which MAY only have meaning to the merchant e.g. use of a gift card, etc.  Ticket terms might also represent a special promotion that is agreed upon by both the merchant AND the lender.  In this case, the lender MUST return the appropriate corresponding `promo_d` in the settlement reconcilliation response.  A value of **9999** indicates the *default* tickets terms where supplied by the merchant, which generally means lender is free to apply whatever discounts, promos they deem appropriate per agreements with the merchant.  */
  ticketTerms: Option[String],
  /* Optional identifier, defined by the lender that identifies a merchant.  If a lender wants to use `lender_merchant_id` every merchant matched with that lender MUST provide this in their RCC (clearing file). */
  lenderMerchantId: Option[String],
  /* Identifier of the device source of this Transaction e.g. a terminal/pos id, mobile app uuid, etc.  */
  deviceId: Option[String],
  /* Expiration, if any, of the customer's account.  The account_expiration comes from the merchant, via a clearing request and not from within of Vyze's SFH system. */
  accountExpiration: Option[Date]
) extends ApiModel

object TransactionEnums {

  type &#x60;Type&#x60; = &#x60;Type&#x60;.Value
  object &#x60;Type&#x60; extends Enumeration {
    val Sale = Value("sale")
    val `Return` = Value("return")
  }

}

